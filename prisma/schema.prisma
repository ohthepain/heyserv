// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Contact {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  history ContactHistory[]
  emails  Email[]
  memories Memory[]

  @@map("contacts")
  @@index([email])
}

model ContactHistory {
  id        String   @id @default(cuid())
  contactId String
  action    String   // "created", "updated", "deleted"
  details   Json?
  timestamp DateTime @default(now())

  contact Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@map("contact_history")
  @@index([contactId])
  @@index([timestamp])
}

// Normalized User Profile System
model UserProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  signoffs     UserSignoff[]
  spacing      UserSpacing?
  defaults     UserDefaults?
  signature    UserSignature?
  names        UserNames?

  @@map("user_profiles")
  @@index([userId])
}

model UserSignoff {
  id        String   @id @default(cuid())
  userId    String
  tone      String   // professional, casual, formal, friendly, polite, urgent, apologetic, neutral
  signoff   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([userId, tone])
  @@index([userId])
  @@map("user_signoffs")
}

model UserSpacing {
  id                        String   @id @default(cuid())
  userId                    String   @unique
  blankLineBeforeSignoff    Boolean  @default(true)
  blankLineBeforeName       Boolean  @default(true)
  blankLineAfterSalutation  Boolean  @default(false)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  profile UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("user_spacing")
}

model UserDefaults {
  id                String   @id @default(cuid())
  userId            String   @unique
  defaultTone       String   @default("professional")
  defaultSignoff    String?
  includeSignature  Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  profile UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("user_defaults")
}

model UserSignature {
  id              String   @id @default(cuid())
  userId          String   @unique
  text            String   @default("")
  html            String   @default("")
  includeInEmails Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  profile UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("user_signatures")
}

model UserNames {
  id           String   @id @default(cuid())
  userId       String   @unique
  formal       String   @default("")
  casual       String   @default("")
  professional String   @default("")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  profile UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("user_names")
}

model Email {
  id             String    @id @default(cuid())
  gmailId        String    @unique // Gmail's unique email ID
  subject        String?
  senderEmail    String
  recipientEmails String[] // Array of recipient emails
  ccEmails       String[]  // Array of CC emails
  bccEmails      String[]  // Array of BCC emails
  body           String?   // Email body content
  bodyHtml       String?   // HTML version of email body
  snippet        String?   // Gmail's snippet
  isRead         Boolean   @default(false)
  isImportant    Boolean   @default(false)
  isStarred      Boolean   @default(false)
  labels         String[]  // Gmail labels
  receivedAt     DateTime  // When email was received
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Foreign key to contact (primary sender)
  contactId String
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  // Relations
  threads EmailThread[]

  @@map("emails")
  @@index([contactId])
  @@index([receivedAt])
}

model EmailThread {
  id        String   @id @default(cuid())
  threadId  String   @unique // Gmail thread ID
  subject   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign key to email
  emailId String
  email   Email @relation(fields: [emailId], references: [id], onDelete: Cascade)

  // Relations
  memories Memory[]

  @@map("email_threads")
  @@index([emailId])
}

model Memory {
  id        String   @id @default(cuid())
  content   String
  type      String   // "note", "reminder", "tag", etc.
  metadata  Json?    // Additional metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign key to contact
  contactId String
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  // Foreign key to thread (optional)
  threadId String?
  thread   EmailThread? @relation(fields: [threadId], references: [id], onDelete: SetNull)

  @@map("memories")
  @@index([contactId])
  @@index([threadId])
}