// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Contact {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  emails   Email[]
  memories Memory[]

  @@map("contacts")
  @@index([email])
}

model Email {
  id             String    @id @default(cuid())
  gmailId        String    @unique // Gmail's unique email ID
  subject        String?
  senderEmail    String
  recipientEmails String[] // Array of recipient emails
  ccEmails       String[]  // Array of CC emails
  bccEmails      String[]  // Array of BCC emails
  body           String?   // Email body content
  bodyHtml       String?   // HTML version of email body
  snippet        String?   // Gmail's snippet
  isRead         Boolean   @default(false)
  isImportant    Boolean   @default(false)
  isStarred      Boolean   @default(false)
  labels         String[]  // Gmail labels
  receivedAt     DateTime  // When email was received
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Foreign key to contact (primary sender)
  contactId String
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  // Foreign key to thread
  threadId String
  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  // Relations
  memories Memory[]

  @@map("emails")
  @@index([gmailId])
  @@index([senderEmail])
  @@index([receivedAt])
  @@index([threadId])
}

model Thread {
  id             String   @id @default(cuid())
  gmailThreadId  String   @unique // Gmail's unique thread ID
  subject        String?
  lastMessageAt  DateTime // When the last message in thread was received
  messageCount   Int      @default(1) // Number of messages in thread
  isRead         Boolean  @default(false)
  isImportant    Boolean  @default(false)
  isStarred      Boolean  @default(false)
  labels         String[] // Gmail labels for the thread
  participants   String[] // Array of all participant emails in thread
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  emails   Email[]
  memories Memory[]

  @@map("threads")
  @@index([gmailThreadId])
  @@index([lastMessageAt])
  @@index([participants])
}

model Memory {
  id          String   @id @default(cuid())
  text        String   // Description of the memory
  memoryType  String?  // Type of memory (e.g., "action_item", "important_info", "follow_up")
  priority    Int      @default(1) // Priority level 1-5
  isCompleted Boolean  @default(false) // For action items
  dueDate     DateTime? // Optional due date for action items
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign key to contact
  contactId String
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  // Optional foreign keys to email and thread
  emailId String?
  email   Email?  @relation(fields: [emailId], references: [id], onDelete: SetNull)

  threadId String?
  thread   Thread? @relation(fields: [threadId], references: [id], onDelete: SetNull)

  @@map("memories")
  @@index([contactId])
  @@index([emailId])
  @@index([threadId])
  @@index([memoryType])
  @@index([isCompleted])
  @@index([dueDate])
}