{
  "name": "lolserv",
  "version": "1.0.0",
  "description": "MCP Server for Gmail AI tools",
  "main": "dist/mcpServer.js",
  "scripts": {
    "build": "tsc",
    "start": "node dist/mcpServer.js",
    "server:dev": "tsx src/mcpServer.ts",
    "client:dev": "tsx src/mcpClient.ts",
    "server:inspect": "npx @modelcontextprotocol/inspector npm run server:dev",
    "mcp": "tsx src/mcpServer.ts",
    "http": "MCP_MODE=http npx tsx src/mcpServer.ts",
    "streaming-http": "MCP_MODE=streaming-http npx tsx src/mcpServer.ts",
    "streaming-http:no-tests": "DISABLE_AUTO_TESTS=true MCP_MODE=streaming-http npx tsx src/mcpServer.ts",
    "test": "tsx test.ts",
    "test:streaming": "tsx testStreamingHttp.ts",
    "test:streaming-chat": "./test-streaming.sh",
    "test:contacts": "tsx testContactManager.ts",
    "test:protocol": "tsx test.ts",
    "db:generate": "prisma generate",
    "db:push": "prisma db push",
    "db:migrate": "prisma migrate dev",
    "db:studio": "prisma studio",
    "db:seed": "tsx prisma/seed.ts",
    "docker:build": "docker buildx build --platform linux/amd64 --load -t lolserv:production .",
    "docker:build:amd64": "docker buildx build --platform linux/amd64 --load -t lolserv:production .",
    "docker:build:arm64": "docker buildx build --platform linux/arm64 --load -t lolserv:production .",
    "docker:build:multi": "docker buildx build --platform linux/amd64,linux/arm64 -t lolserv:production .",
    "docker:build:dev": "docker build -t lolserv:dev .",
    "docker:test": "docker run --rm -p 4001:4000 --env-file .env -e NODE_ENV=production -e MCP_MODE=streaming-http lolserv:production",
    "docker:test:interactive": "docker run --rm -it -p 4001:4000 --env-file .env -e NODE_ENV=production -e MCP_MODE=streaming-http lolserv:production",
    "docker:test:with-tests": "docker run --rm -p 4000:4000 --env-file .env -e NODE_ENV=development -e MCP_MODE=streaming-http lolserv:production",
    "docker:test:interactive:with-tests": "docker run --rm -it -p 4000:4000 --env-file .env -e NODE_ENV=development -e MCP_MODE=streaming-http lolserv:production",
    "docker:compose:build": "docker compose -f compose-production.yml build",
    "docker:compose:up": "docker compose -f compose-production.yml up -d",
    "docker:compose:down": "docker compose -f compose-production.yml down",
    "docker:compose:logs": "docker compose -f compose-production.yml logs -f",
    "docker:compose:test": "npm run docker:compose:build && npm run docker:compose:up && sleep 15 && curl -f http://localhost:4000/ && npm run docker:compose:down",
    "docker:push": "./push-to-registry.sh",
    "docker:deploy": "./deploy-production.sh",
    "docker:clean": "docker system prune -f && docker image prune -f",
    "docker:clean:all": "docker system prune -a -f"
  },
  "keywords": [
    "mcp",
    "server",
    "gmail",
    "ai",
    "express"
  ],
  "author": "",
  "license": "ISC",
  "type": "module",
  "dependencies": {
    "@modelcontextprotocol/sdk": "^1.18.0",
    "@prisma/client": "^6.16.2",
    "cors": "^2.8.5",
    "dotenv": "^16.3.1",
    "express": "^4.18.2",
    "node-fetch": "^3.3.2",
    "openai": "^5.20.2",
    "prisma": "^6.16.2",
    "zod": "^3.25.76"
  },
  "devDependencies": {
    "@types/cors": "^2.8.17",
    "@types/express": "^4.17.21",
    "@types/node": "^20.10.0",
    "tsx": "^4.6.0",
    "typescript": "^5.3.0"
  }
}
